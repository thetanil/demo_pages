name: wasm

on:
  push:
    paths:
      - "**"
      - ".github/workflows/wasm.yml"

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04

    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      PROJECT_BUILD_PATH: ${{ github.workspace }}/${{ github.event.repository.name }}/build
      # PROJECT_RELEASE_PATH: ${{ github.event.repository.name }}_dev_linux_x64
      # PROJECT_CUSTOM_FLAGS: ""
      PLATFORM: PLATFORM_WEB

    steps:
      - uses: actions/checkout@v4

        # - name: Checkout raylib repo
        #   uses: actions/checkout@v4
        #   with:
        #     repository: raysan5/raylib
        #     path: raylib

        # - name: Setup Release Paths
        #   run: |
        #     echo "PROJECT_RELEASE_PATH=${{ env.PROJECT_NAME }}_v${{ github.event.release.tag_name }}_linux_x64" >> $GITHUB_ENV
        #   shell: bash
        #   if: github.event_name == 'release' && github.event.action == 'published'

      - name: debug
        run: |
          echo "pwd $(pwd)"
          echo "ls $(ls)"
          echo "env $(env)"
          echo "github $(github)"
          echo "github.workspace $(github.workspace)"
          echo "github.event $(github.event)"
          echo "github.event.repository $(github.event.repository)"
          echo "github.event.repository.name $(github.event.repository.name)"
          echo "github.event.release $(github.event.release)"
          echo "github.event.release.tag_name $(github.event.release.tag_name

      - name: Setup Environment
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev
        shell:
          bash

          # - name: Setup Emscripten toolchain
          #   # You may pin to the exact commit or the version.
          #   # uses: mymindstorm/setup-emsdk@6ab9eb1bda2574c4ddb79809fc9247783eaf9021
          #   uses: mymindstorm/setup-emsdk@v14
          #   with:
          #     no-cache: true
          #     update: true
          #     update-tags: false

      - name: Install Emscripten
        run: |
          mkdir -p ${{ env.PROJECT_BUILD_PATH }}
          git clone https://github.com/emscripten-core/emsdk.git ${{ env.PROJECT_BUILD_PATH }}/emsdk
          cd ${{ env.PROJECT_BUILD_PATH }}/emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ${{ env.PROJECT_BUILD_PATH }}/emsdk/emsdk_env.sh
          emcc --version
        shell:
          bash

          # - name: Build raylib Library
          #   run: |
          #     cd raylib/src
          #     gcc --version
          #     make PLATFORM=${{ env.PLATFORM }} BUILD_MODE=RELEASE RAYLIB_LIBTYPE=STATIC RAYLIB_PROJECT_RELEASE_PATH=. -B
          #
      - name: debug
        run: |
          echo "pwd $(pwd)"
          echo "ls $(ls)"
          echo "env $(env)"
          echo "github $(github)"
          echo "github.workspace $(github.workspace)"
          echo "github.event $(github.event)"
          echo "github.event.repository $(github.event.repository)"
          echo "github.event.repository.name $(github.event.repository.name)"
          echo "github.event.release $(github.event.release)"
          echo "github.event.release.tag_name $(github.event.release.tag_name

      - name: Build Project
        run: |
          source ${{ env.PROJECT_BUILD_PATH }}/emsdk/emsdk_env.sh
          cd ${{ github.workspace }}/demo_pages
          make PLATFORM=${{ env.PLATFORM }}
          rm -rf ${{ env.PROJECT_BUILD_PATH }}/emsdk
          cp index.html ${{ env.PROJECT_BUILD_PATH }}/index.html

      - name: Tree
        run: |
          tree ${{ env.PROJECT_BUILD_PATH }}

      # - uses: actions/upload-artifact@v4
      #   with:
      #     path:
      #       ${{ env.PROJECT_BUILD_PATH }}

      # - name: Generate Artifacts
      #   run: |
      #     ls ${{ env.PROJECT_BUILD_PATH }}
      #     cp ${{ env.PROJECT_BUILD_PATH }}/${{ env.PROJECT_NAME }} ${{ env.PROJECT_RELEASE_PATH }}
      #     cp ${{ env.PROJECT_NAME }}/README.md ${{ env.PROJECT_RELEASE_PATH }}
      #     cp ${{ env.PROJECT_NAME }}/LICENSE ${{ env.PROJECT_RELEASE_PATH }}
      #     ls ${{ env.PROJECT_RELEASE_PATH }}
      #     7z a ./${{ env.PROJECT_RELEASE_PATH }}.zip ./${{ env.PROJECT_RELEASE_PATH }}

      # Issue: Double zip: https://github.com/actions/upload-artifact/issues/39
      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ env.PROJECT_RELEASE_PATH }}.zip
      #     path: ./${{ env.PROJECT_RELEASE_PATH }}.zip

      # Alternative: https://github.com/marketplace/actions/gh-release
      # - name: Upload Artifact to Release
      #   uses: actions/upload-release-asset@v1.0.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ github.event.release.upload_url }}
      #     asset_name: ${{ env.PROJECT_RELEASE_PATH }}.zip
      #     asset_path: ./${{ env.PROJECT_RELEASE_PATH }}.zip
      #     asset_content_type: application/zip
      #   if: github.event_name == 'release' && github.event.action == 'published'
      #
      - name: Fix permissions
        run: |
          chmod -c -R +rX ${{ env.PROJECT_BUILD_PATH }} | while read line; do
            echo "::warning title=Invalid file permissions automatically fixed::$line"
          done

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ${{ env.PROJECT_BUILD_PATH }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    permissions:
      pages: write
      id-token: write

    environment:
      # environment created automatically by GitHub
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
